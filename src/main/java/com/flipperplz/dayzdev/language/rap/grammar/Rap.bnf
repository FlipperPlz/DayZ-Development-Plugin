{
    parserClass="com.flipperplz.dayzdev.language.rap.parser.RapParser"
  parserUtilClass="com.flipperplz.dayzdev.language.rap.parser.RapParserUtil"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Rap"
    psiImplClassSuffix="Impl"
    psiPackage="com.flipperplz.dayzdev.language.rap.psi"
    psiImplPackage="com.flipperplz.dayzdev.language.rap.psi.impl"

    elementTypeHolderClass="com.flipperplz.dayzdev.language.rap.psi.RapElementTypes"
    elementTypeClass="com.flipperplz.dayzdev.language.rap.psi.RapElementType"
    tokenTypeClass="com.flipperplz.dayzdev.language.rap.psi.RapTokenType"

    tokens = [
        SINGLE_LINE_COMMENT      = 'regexp://.*';
        EMPTY_DELIMITED_COMMENT  = 'regexp:/\*\*?/';
        DELIMITED_COMMENT        = 'regexp:/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/'
        LITERALSTRING            = 'regexp:"(\\\\|\\"|.*?)*"';
        LITERALINTEGER           = 'regexp:-?[0-9]+';
        LITERALFLOAT             = 'regexp:[+-]?\d+(\.\d+)([Ee][+-]?\d+)?';
        IDENTIFIER               = 'regexp:[a-zA-Z0-9_]+';
        WHITE_SPACE              = 'regexp:\s+'
        LSBRACKET                = '['
        RSBRACKET                = ']'
        LCURLY                   = '{'
        RCURLY                   = '}'
        SEMICOLON                = ';'
        COLON                    = ':'
        COMMA                    = ','
        ASSIGN                   = '='
        APPEND                   = '+='
    ]
}

ParamFile ::= Statement*;
Statement ::=
             DeleteStatement            |
             ArrayAppensionStatement    |
             ExternalClassDeclaration   |
             ClassDeclaration           |
             ArrayDeclaration           |
             TokenDeclaration           ;

ClassDeclaration ::= class ClassName (ClassExtension)? StatementBlock semicolon
ExternalClassDeclaration ::= class ClassName semicolon
TokenDeclaration ::= VariableName assign TokenValue semicolon
ArrayDeclaration ::= ArrayName assign LiteralArray semicolon
ArrayAppensionStatement ::= ArrayName append LiteralArray semicolon
DeleteStatement ::= delete ClassName semicolon

LiteralArray ::= lcurly (ArrayValue (comma ArrayValue)* comma?)? rcurly
ArrayValue ::= (TokenValue | LiteralArray)
TokenValue ::= LITERALSTRING | LITERALINTEGER | LITERALFLOAT
ClassExtension ::= colon ClassName
ArrayName ::= VariableName lsbracket rsbracket
StatementBlock ::= lcurly Statement* rcurly;
ClassName ::= IDENTIFIER
VariableName ::= IDENTIFIER
