/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.flipperplz.dayzdev.language.enforce.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.flipperplz.dayzdev.language.enforce.psi.EnforceElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>EnforceLexer.flex</tt>
 */
public class EnforceLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\30\4\2\22\0\1\30\1\43\1\5\2\0\1\50\1\45\1\0\1\51\1\52\1\4\1\6\1\37"+
    "\1\15\1\10\1\3\1\12\11\7\1\36\1\35\1\40\1\42\1\41\2\0\4\14\1\11\1\14\21\27"+
    "\1\13\2\27\1\31\1\0\1\32\1\46\1\27\1\0\1\23\1\64\1\53\1\55\1\21\1\22\1\66"+
    "\1\60\1\61\1\27\1\65\1\24\1\56\1\26\1\63\1\62\1\27\1\17\1\25\1\16\1\20\1\67"+
    "\1\57\1\54\2\27\1\33\1\44\1\34\1\47\6\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\6\1\11\10\10\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\12\10"+
    "\1\34\1\0\1\35\1\36\1\0\1\37\1\40\1\0"+
    "\1\41\1\0\1\10\1\6\1\42\1\43\23\10\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\5\10\1\57\10\10\1\0\1\60\1\0"+
    "\1\61\1\6\4\10\1\62\5\10\1\63\7\10\1\64"+
    "\2\10\1\65\1\66\10\10\1\67\5\10\1\0\1\60"+
    "\1\0\1\70\1\10\1\71\2\10\1\72\1\73\11\10"+
    "\1\74\16\10\1\75\1\10\1\76\1\0\1\61\5\10"+
    "\1\77\2\10\1\100\1\10\1\101\4\10\1\102\1\10"+
    "\1\103\2\10\1\104\1\105\2\10\1\106\1\107\1\10"+
    "\1\110\1\10\1\111\1\112\5\10\1\113\1\114\1\115"+
    "\1\116\2\10\1\117\1\120\6\10\1\121\1\122\1\123"+
    "\1\124\1\10\1\125\4\10\1\126\1\127\1\10\1\130"+
    "\1\131\1\132\1\133";

  private static int [] zzUnpackAction() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\70\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\70\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508"+
    "\0\u0540\0\u0578\0\70\0\70\0\70\0\70\0\u05b0\0\u05e8"+
    "\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8"+
    "\0\u07e0\0\u0818\0\70\0\70\0\u0118\0\u0118\0\70\0\u0850"+
    "\0\70\0\u0888\0\u08c0\0\u08f8\0\70\0\70\0\u0930\0\u0968"+
    "\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28"+
    "\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8"+
    "\0\u0d20\0\u0d58\0\70\0\u0d90\0\70\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\70\0\u0dc8\0\u0e00\0\u0e38\0\u0e70"+
    "\0\u0ea8\0\u01c0\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8"+
    "\0\u1030\0\u1068\0\u10a0\0\u10a0\0\u10d8\0\u1110\0\u08c0\0\u1148"+
    "\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308"+
    "\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8"+
    "\0\u1500\0\u01c0\0\u1538\0\u1570\0\70\0\70\0\u15a8\0\u15e0"+
    "\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u01c0\0\u1768"+
    "\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\70\0\u18b8\0\u01c0"+
    "\0\u18f0\0\u01c0\0\u1928\0\u1960\0\u01c0\0\u01c0\0\u1998\0\u19d0"+
    "\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u01c0"+
    "\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18"+
    "\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u01c0\0\u1ea0"+
    "\0\70\0\u1ed8\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0"+
    "\0\u01c0\0\u2028\0\u2060\0\u01c0\0\u2098\0\u01c0\0\u20d0\0\u2108"+
    "\0\u2140\0\u2178\0\u01c0\0\u21b0\0\u01c0\0\u21e8\0\u2220\0\u01c0"+
    "\0\u01c0\0\u2258\0\u2290\0\u01c0\0\u01c0\0\u22c8\0\u01c0\0\u2300"+
    "\0\u01c0\0\u01c0\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u2418\0\u01c0"+
    "\0\u01c0\0\u01c0\0\u01c0\0\u2450\0\u2488\0\u01c0\0\u01c0\0\u24c0"+
    "\0\u24f8\0\u2530\0\u2568\0\u25a0\0\u25d8\0\u01c0\0\u01c0\0\u01c0"+
    "\0\u01c0\0\u2610\0\u01c0\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u01c0"+
    "\0\u01c0\0\u2728\0\u01c0\0\u01c0\0\u01c0\0\u01c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\2\12\1\14\1\15\1\16\1\12\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\12\1\3\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\12\1\50\1\51\1\52\1\12\1\53"+
    "\1\54\1\55\1\56\1\12\1\57\1\60\72\0\1\3"+
    "\25\0\1\3\42\0\1\61\1\62\35\0\1\63\67\0"+
    "\1\64\25\0\1\65\2\0\2\65\1\66\62\65\6\0"+
    "\1\67\1\70\2\0\1\70\27\0\1\71\34\0\1\10"+
    "\1\72\1\12\1\10\2\12\1\0\12\12\23\0\15\12"+
    "\7\0\1\12\1\0\4\12\1\0\12\12\23\0\15\12"+
    "\7\0\1\10\1\72\1\12\1\10\1\73\1\12\1\0"+
    "\12\12\23\0\1\12\1\73\13\12\7\0\1\74\2\0"+
    "\1\74\2\0\1\75\24\0\1\76\34\0\1\12\1\0"+
    "\4\12\1\0\1\12\1\77\10\12\23\0\5\12\1\100"+
    "\7\12\7\0\1\12\1\0\4\12\1\0\3\12\1\101"+
    "\6\12\23\0\15\12\7\0\1\12\1\0\4\12\1\0"+
    "\6\12\1\102\1\12\1\103\1\12\23\0\1\12\1\104"+
    "\12\12\1\105\7\0\1\12\1\0\4\12\1\0\5\12"+
    "\1\106\4\12\23\0\10\12\1\107\4\12\7\0\1\12"+
    "\1\0\4\12\1\0\2\12\1\110\7\12\23\0\15\12"+
    "\7\0\1\12\1\0\4\12\1\0\12\12\23\0\10\12"+
    "\1\111\4\12\7\0\1\12\1\0\4\12\1\0\1\112"+
    "\1\12\1\113\1\114\6\12\23\0\4\12\1\115\10\12"+
    "\7\0\1\12\1\0\4\12\1\0\2\12\1\116\1\117"+
    "\1\12\1\120\4\12\23\0\10\12\1\121\4\12\40\0"+
    "\1\122\1\0\1\123\66\0\1\124\1\125\67\0\1\126"+
    "\67\0\1\127\67\0\1\130\1\0\1\131\65\0\1\132"+
    "\2\0\1\133\64\0\1\134\34\0\1\12\1\0\4\12"+
    "\1\0\6\12\1\135\3\12\23\0\10\12\1\136\4\12"+
    "\7\0\1\12\1\0\4\12\1\0\3\12\1\137\6\12"+
    "\23\0\15\12\7\0\1\12\1\0\4\12\1\0\12\12"+
    "\23\0\10\12\1\140\4\12\7\0\1\12\1\0\4\12"+
    "\1\0\12\12\23\0\5\12\1\141\7\12\7\0\1\12"+
    "\1\0\4\12\1\0\4\12\1\142\3\12\1\143\1\12"+
    "\23\0\15\12\7\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\144\10\12\23\0\15\12\7\0\1\12\1\0\4\12"+
    "\1\0\2\12\1\145\7\12\23\0\4\12\1\146\7\12"+
    "\1\147\7\0\1\12\1\0\4\12\1\0\1\12\1\150"+
    "\10\12\23\0\15\12\7\0\1\12\1\0\4\12\1\0"+
    "\12\12\23\0\10\12\1\151\4\12\7\0\1\12\1\0"+
    "\4\12\1\0\12\12\23\0\10\12\1\152\4\12\1\61"+
    "\2\0\65\61\3\153\1\154\1\155\63\153\7\0\1\70"+
    "\1\72\1\0\1\70\64\0\1\156\2\0\1\156\64\0"+
    "\1\157\1\0\2\157\1\12\1\157\1\0\3\12\3\157"+
    "\4\12\23\0\1\157\1\12\1\157\6\12\1\157\3\12"+
    "\7\0\1\74\1\72\1\0\1\74\64\0\1\12\1\0"+
    "\4\12\1\0\2\12\1\160\7\12\23\0\15\12\7\0"+
    "\1\12\1\0\4\12\1\0\1\12\1\161\10\12\23\0"+
    "\6\12\1\162\6\12\7\0\1\12\1\0\4\12\1\0"+
    "\1\163\3\12\1\164\5\12\23\0\15\12\7\0\1\12"+
    "\1\0\4\12\1\0\7\12\1\165\2\12\23\0\15\12"+
    "\7\0\1\12\1\0\4\12\1\0\2\12\1\166\7\12"+
    "\23\0\15\12\7\0\1\12\1\0\4\12\1\0\1\167"+
    "\11\12\23\0\15\12\7\0\1\12\1\0\4\12\1\0"+
    "\3\12\1\170\6\12\23\0\15\12\7\0\1\12\1\0"+
    "\4\12\1\0\6\12\1\171\3\12\23\0\15\12\7\0"+
    "\1\12\1\0\4\12\1\0\1\12\1\172\10\12\23\0"+
    "\15\12\7\0\1\12\1\0\4\12\1\0\1\173\11\12"+
    "\23\0\15\12\7\0\1\12\1\0\4\12\1\0\12\12"+
    "\23\0\1\174\14\12\7\0\1\12\1\0\4\12\1\0"+
    "\5\12\1\175\4\12\23\0\15\12\7\0\1\12\1\0"+
    "\4\12\1\0\12\12\23\0\7\12\1\176\5\12\7\0"+
    "\1\12\1\0\4\12\1\0\5\12\1\177\4\12\23\0"+
    "\15\12\7\0\1\12\1\0\4\12\1\0\12\12\23\0"+
    "\6\12\1\200\6\12\7\0\1\12\1\0\4\12\1\0"+
    "\6\12\1\201\3\12\23\0\15\12\7\0\1\12\1\0"+
    "\4\12\1\0\12\12\23\0\4\12\1\202\10\12\7\0"+
    "\1\12\1\0\4\12\1\0\1\203\11\12\23\0\15\12"+
    "\7\0\1\12\1\0\4\12\1\0\1\204\11\12\23\0"+
    "\15\12\42\0\1\205\67\0\1\206\34\0\1\12\1\0"+
    "\4\12\1\0\5\12\1\207\4\12\23\0\15\12\7\0"+
    "\1\12\1\0\4\12\1\0\10\12\1\210\1\12\23\0"+
    "\15\12\7\0\1\12\1\0\4\12\1\0\6\12\1\211"+
    "\3\12\23\0\15\12\7\0\1\12\1\0\4\12\1\0"+
    "\12\12\23\0\2\12\1\212\12\12\7\0\1\12\1\0"+
    "\4\12\1\0\12\12\23\0\6\12\1\213\6\12\7\0"+
    "\1\12\1\0\4\12\1\0\12\12\23\0\10\12\1\214"+
    "\4\12\7\0\1\12\1\0\4\12\1\0\12\12\23\0"+
    "\6\12\1\215\1\12\1\216\4\12\7\0\1\12\1\0"+
    "\4\12\1\0\1\217\11\12\23\0\15\12\7\0\1\12"+
    "\1\0\4\12\1\0\10\12\1\220\1\12\23\0\15\12"+
    "\7\0\1\12\1\0\4\12\1\0\3\12\1\221\6\12"+
    "\23\0\15\12\7\0\1\12\1\0\4\12\1\0\3\12"+
    "\1\222\6\12\23\0\15\12\7\0\1\12\1\0\4\12"+
    "\1\0\1\223\11\12\23\0\15\12\7\0\1\12\1\0"+
    "\4\12\1\0\6\12\1\224\3\12\23\0\15\12\4\153"+
    "\1\225\66\153\1\226\1\225\63\153\7\0\1\156\1\0"+
    "\1\227\1\156\6\0\1\227\55\0\1\12\1\0\4\12"+
    "\1\0\3\12\1\230\6\12\23\0\15\12\7\0\1\12"+
    "\1\0\4\12\1\0\3\12\1\231\6\12\23\0\15\12"+
    "\7\0\1\12\1\0\4\12\1\0\7\12\1\232\2\12"+
    "\23\0\15\12\7\0\1\12\1\0\4\12\1\0\2\12"+
    "\1\233\7\12\23\0\15\12\7\0\1\12\1\0\4\12"+
    "\1\0\3\12\1\234\6\12\23\0\15\12\7\0\1\12"+
    "\1\0\4\12\1\0\3\12\1\235\6\12\23\0\15\12"+
    "\7\0\1\12\1\0\4\12\1\0\12\12\23\0\3\12"+
    "\1\236\11\12\7\0\1\12\1\0\4\12\1\0\3\12"+
    "\1\237\6\12\23\0\15\12\7\0\1\12\1\0\4\12"+
    "\1\0\10\12\1\240\1\12\23\0\15\12\7\0\1\12"+
    "\1\0\4\12\1\0\7\12\1\160\2\12\23\0\15\12"+
    "\7\0\1\12\1\0\4\12\1\0\3\12\1\241\6\12"+
    "\23\0\15\12\7\0\1\12\1\0\4\12\1\0\12\12"+
    "\23\0\10\12\1\242\4\12\7\0\1\12\1\0\4\12"+
    "\1\0\5\12\1\243\4\12\23\0\15\12\7\0\1\12"+
    "\1\0\4\12\1\0\1\244\11\12\23\0\15\12\7\0"+
    "\1\12\1\0\4\12\1\0\3\12\1\245\6\12\23\0"+
    "\15\12\7\0\1\12\1\0\4\12\1\0\6\12\1\246"+
    "\3\12\23\0\15\12\7\0\1\12\1\0\4\12\1\0"+
    "\1\247\11\12\23\0\15\12\7\0\1\12\1\0\4\12"+
    "\1\0\6\12\1\250\3\12\23\0\15\12\7\0\1\12"+
    "\1\0\4\12\1\0\12\12\23\0\6\12\1\251\6\12"+
    "\7\0\1\12\1\0\4\12\1\0\10\12\1\252\1\12"+
    "\23\0\15\12\7\0\1\12\1\0\4\12\1\0\7\12"+
    "\1\253\2\12\23\0\15\12\7\0\1\12\1\0\4\12"+
    "\1\0\1\254\6\12\1\255\2\12\23\0\15\12\7\0"+
    "\1\12\1\0\4\12\1\0\3\12\1\256\6\12\23\0"+
    "\15\12\7\0\1\12\1\0\4\12\1\0\12\12\23\0"+
    "\2\12\1\257\12\12\7\0\1\12\1\0\4\12\1\0"+
    "\6\12\1\260\3\12\23\0\15\12\7\0\1\12\1\0"+
    "\4\12\1\0\2\12\1\261\7\12\23\0\15\12\7\0"+
    "\1\12\1\0\4\12\1\0\12\12\23\0\14\12\1\262"+
    "\7\0\1\12\1\0\4\12\1\0\1\263\11\12\23\0"+
    "\15\12\7\0\1\12\1\0\4\12\1\0\3\12\1\264"+
    "\6\12\23\0\15\12\7\0\1\12\1\0\4\12\1\0"+
    "\1\12\1\265\10\12\23\0\15\12\7\0\1\12\1\0"+
    "\4\12\1\0\5\12\1\266\4\12\23\0\15\12\7\0"+
    "\1\12\1\0\4\12\1\0\12\12\23\0\10\12\1\267"+
    "\4\12\7\0\1\12\1\0\4\12\1\0\5\12\1\270"+
    "\4\12\23\0\15\12\3\153\1\271\1\225\63\153\6\0"+
    "\1\272\1\273\2\0\1\273\2\0\1\272\61\0\1\12"+
    "\1\0\4\12\1\0\5\12\1\274\4\12\23\0\15\12"+
    "\7\0\1\12\1\0\4\12\1\0\1\12\1\275\10\12"+
    "\23\0\15\12\7\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\276\10\12\23\0\15\12\7\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\277\6\12\1\300\1\12\23\0\15\12"+
    "\7\0\1\12\1\0\4\12\1\0\1\301\11\12\23\0"+
    "\15\12\7\0\1\12\1\0\4\12\1\0\5\12\1\302"+
    "\4\12\23\0\15\12\7\0\1\12\1\0\4\12\1\0"+
    "\12\12\23\0\7\12\1\303\5\12\7\0\1\12\1\0"+
    "\4\12\1\0\6\12\1\304\3\12\23\0\15\12\7\0"+
    "\1\12\1\0\4\12\1\0\12\12\23\0\6\12\1\305"+
    "\6\12\7\0\1\12\1\0\4\12\1\0\1\12\1\306"+
    "\10\12\23\0\15\12\7\0\1\12\1\0\4\12\1\0"+
    "\3\12\1\307\6\12\23\0\15\12\7\0\1\12\1\0"+
    "\4\12\1\0\12\12\23\0\1\310\14\12\7\0\1\12"+
    "\1\0\4\12\1\0\12\12\23\0\14\12\1\311\7\0"+
    "\1\12\1\0\4\12\1\0\2\12\1\312\7\12\23\0"+
    "\15\12\7\0\1\12\1\0\4\12\1\0\7\12\1\313"+
    "\2\12\23\0\15\12\7\0\1\12\1\0\4\12\1\0"+
    "\12\12\23\0\6\12\1\314\6\12\7\0\1\12\1\0"+
    "\4\12\1\0\1\315\11\12\23\0\15\12\7\0\1\12"+
    "\1\0\4\12\1\0\1\316\11\12\23\0\15\12\7\0"+
    "\1\12\1\0\4\12\1\0\3\12\1\317\6\12\23\0"+
    "\15\12\7\0\1\12\1\0\4\12\1\0\3\12\1\320"+
    "\6\12\23\0\15\12\7\0\1\12\1\0\4\12\1\0"+
    "\1\321\11\12\23\0\15\12\7\0\1\12\1\0\4\12"+
    "\1\0\5\12\1\322\4\12\23\0\15\12\7\0\1\12"+
    "\1\0\4\12\1\0\3\12\1\323\6\12\23\0\10\12"+
    "\1\324\4\12\7\0\1\12\1\0\4\12\1\0\12\12"+
    "\23\0\2\12\1\325\12\12\7\0\1\12\1\0\4\12"+
    "\1\0\1\12\1\326\10\12\23\0\15\12\7\0\1\12"+
    "\1\0\4\12\1\0\12\12\23\0\12\12\1\327\2\12"+
    "\7\0\1\12\1\0\4\12\1\0\1\330\11\12\23\0"+
    "\15\12\7\0\1\273\2\0\1\273\64\0\1\12\1\0"+
    "\4\12\1\0\12\12\23\0\2\12\1\331\12\12\7\0"+
    "\1\12\1\0\4\12\1\0\10\12\1\332\1\12\23\0"+
    "\15\12\7\0\1\12\1\0\4\12\1\0\3\12\1\333"+
    "\6\12\23\0\15\12\7\0\1\12\1\0\4\12\1\0"+
    "\10\12\1\334\1\12\23\0\15\12\7\0\1\12\1\0"+
    "\4\12\1\0\12\12\23\0\2\12\1\335\12\12\7\0"+
    "\1\12\1\0\4\12\1\0\12\12\23\0\1\336\14\12"+
    "\7\0\1\12\1\0\4\12\1\0\1\337\11\12\23\0"+
    "\15\12\7\0\1\12\1\0\4\12\1\0\12\12\23\0"+
    "\1\340\14\12\7\0\1\12\1\0\4\12\1\0\12\12"+
    "\23\0\2\12\1\341\12\12\7\0\1\12\1\0\4\12"+
    "\1\0\12\12\23\0\5\12\1\342\7\12\7\0\1\12"+
    "\1\0\4\12\1\0\3\12\1\343\6\12\23\0\15\12"+
    "\7\0\1\12\1\0\4\12\1\0\6\12\1\344\3\12"+
    "\23\0\15\12\7\0\1\12\1\0\4\12\1\0\10\12"+
    "\1\345\1\12\23\0\15\12\7\0\1\12\1\0\4\12"+
    "\1\0\3\12\1\346\6\12\23\0\15\12\7\0\1\12"+
    "\1\0\4\12\1\0\12\12\23\0\2\12\1\347\12\12"+
    "\7\0\1\12\1\0\4\12\1\0\1\350\11\12\23\0"+
    "\15\12\7\0\1\12\1\0\4\12\1\0\12\12\23\0"+
    "\1\351\14\12\7\0\1\12\1\0\4\12\1\0\12\12"+
    "\23\0\6\12\1\352\6\12\7\0\1\12\1\0\4\12"+
    "\1\0\12\12\23\0\6\12\1\353\6\12\7\0\1\12"+
    "\1\0\4\12\1\0\10\12\1\354\1\12\23\0\15\12"+
    "\7\0\1\12\1\0\4\12\1\0\5\12\1\355\4\12"+
    "\23\0\15\12\7\0\1\12\1\0\4\12\1\0\7\12"+
    "\1\356\2\12\23\0\15\12\7\0\1\12\1\0\4\12"+
    "\1\0\12\12\23\0\5\12\1\357\7\12\7\0\1\12"+
    "\1\0\4\12\1\0\1\12\1\360\10\12\23\0\15\12"+
    "\7\0\1\12\1\0\4\12\1\0\6\12\1\361\3\12"+
    "\23\0\15\12\7\0\1\12\1\0\4\12\1\0\2\12"+
    "\1\362\7\12\23\0\15\12\7\0\1\12\1\0\4\12"+
    "\1\0\3\12\1\363\6\12\23\0\15\12\7\0\1\12"+
    "\1\0\4\12\1\0\1\364\11\12\23\0\15\12\7\0"+
    "\1\12\1\0\4\12\1\0\12\12\23\0\2\12\1\365"+
    "\12\12\7\0\1\12\1\0\4\12\1\0\6\12\1\366"+
    "\3\12\23\0\15\12\7\0\1\12\1\0\4\12\1\0"+
    "\12\12\23\0\1\367\14\12\7\0\1\12\1\0\4\12"+
    "\1\0\6\12\1\370\3\12\23\0\15\12\7\0\1\12"+
    "\1\0\4\12\1\0\3\12\1\371\6\12\23\0\15\12"+
    "\7\0\1\12\1\0\4\12\1\0\3\12\1\372\6\12"+
    "\23\0\15\12\7\0\1\12\1\0\4\12\1\0\3\12"+
    "\1\373\6\12\23\0\15\12\7\0\1\12\1\0\4\12"+
    "\1\0\3\12\1\374\6\12\23\0\15\12\7\0\1\12"+
    "\1\0\4\12\1\0\3\12\1\375\6\12\23\0\15\12"+
    "\7\0\1\12\1\0\4\12\1\0\12\12\23\0\2\12"+
    "\1\376\12\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10080];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\13\1\7\11\7\1\4\11"+
    "\13\1\1\0\2\11\1\0\1\1\1\11\1\0\1\11"+
    "\1\0\2\1\2\11\24\1\1\11\1\1\10\11\16\1"+
    "\1\0\1\1\1\0\27\1\2\11\16\1\1\0\1\11"+
    "\1\0\41\1\1\11\1\0\104\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public EnforceLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EnforceLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 92: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 93: break;
          case 3: 
            { return OP_DIVIDE;
            } 
            // fall through
          case 94: break;
          case 4: 
            { return OP_MULTIPLY;
            } 
            // fall through
          case 95: break;
          case 5: 
            { return OP_ADD;
            } 
            // fall through
          case 96: break;
          case 6: 
            { return INTEGER_LITERAL;
            } 
            // fall through
          case 97: break;
          case 7: 
            { return OP_DOT;
            } 
            // fall through
          case 98: break;
          case 8: 
            { return IDENTIFIER;
            } 
            // fall through
          case 99: break;
          case 9: 
            { return OP_SUBTRACT;
            } 
            // fall through
          case 100: break;
          case 10: 
            { return LSBRACKET;
            } 
            // fall through
          case 101: break;
          case 11: 
            { return RSBRACKET;
            } 
            // fall through
          case 102: break;
          case 12: 
            { return LCURLY;
            } 
            // fall through
          case 103: break;
          case 13: 
            { return RCURLY;
            } 
            // fall through
          case 104: break;
          case 14: 
            { return SEMICOLON;
            } 
            // fall through
          case 105: break;
          case 15: 
            { return COLON;
            } 
            // fall through
          case 106: break;
          case 16: 
            { return COMMA;
            } 
            // fall through
          case 107: break;
          case 17: 
            { return OP_LESS;
            } 
            // fall through
          case 108: break;
          case 18: 
            { return OP_GREATER;
            } 
            // fall through
          case 109: break;
          case 19: 
            { return OP_ASSIGN;
            } 
            // fall through
          case 110: break;
          case 20: 
            { return OP_BANG;
            } 
            // fall through
          case 111: break;
          case 21: 
            { return OP_BITWISE_OR;
            } 
            // fall through
          case 112: break;
          case 22: 
            { return OP_BITWISE_AND;
            } 
            // fall through
          case 113: break;
          case 23: 
            { return OP_BITWISE_XOR;
            } 
            // fall through
          case 114: break;
          case 24: 
            { return OP_BITWISE_NOT;
            } 
            // fall through
          case 115: break;
          case 25: 
            { return OP_MODULO;
            } 
            // fall through
          case 116: break;
          case 26: 
            { return LPARENTHESIS;
            } 
            // fall through
          case 117: break;
          case 27: 
            { return RPARENTHESIS;
            } 
            // fall through
          case 118: break;
          case 28: 
            { return SINGLE_LINE_COMMENT;
            } 
            // fall through
          case 119: break;
          case 29: 
            { return OP_DIVIDE_ASSIGN;
            } 
            // fall through
          case 120: break;
          case 30: 
            { return OP_MULTIPLY_ASSIGN;
            } 
            // fall through
          case 121: break;
          case 31: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 122: break;
          case 32: 
            { return OP_INCREMENT;
            } 
            // fall through
          case 123: break;
          case 33: 
            { return OP_ADD_ASSIGN;
            } 
            // fall through
          case 124: break;
          case 34: 
            { return OP_DECREMENT;
            } 
            // fall through
          case 125: break;
          case 35: 
            { return OP_SUBTRACT_ASSIGN;
            } 
            // fall through
          case 126: break;
          case 36: 
            { return OP_LSHIFT;
            } 
            // fall through
          case 127: break;
          case 37: 
            { return OP_LESS_EQUAL;
            } 
            // fall through
          case 128: break;
          case 38: 
            { return OP_RSHIFT;
            } 
            // fall through
          case 129: break;
          case 39: 
            { return OP_GREATER_EQUAL;
            } 
            // fall through
          case 130: break;
          case 40: 
            { return OP_EQUAL;
            } 
            // fall through
          case 131: break;
          case 41: 
            { return OP_INEQUAL;
            } 
            // fall through
          case 132: break;
          case 42: 
            { return OP_OR_ASSIGN;
            } 
            // fall through
          case 133: break;
          case 43: 
            { return OP_LOGICAL_OR;
            } 
            // fall through
          case 134: break;
          case 44: 
            { return OP_AND_ASSIGN;
            } 
            // fall through
          case 135: break;
          case 45: 
            { return OP_LOGICAL_AND;
            } 
            // fall through
          case 136: break;
          case 46: 
            { return OP_XOR_ASSIGN;
            } 
            // fall through
          case 137: break;
          case 47: 
            { return IF;
            } 
            // fall through
          case 138: break;
          case 48: 
            { return EMPTY_DELIMITED_COMMENT;
            } 
            // fall through
          case 139: break;
          case 49: 
            { return FLOAT_LITERAL;
            } 
            // fall through
          case 140: break;
          case 50: 
            { return REF;
            } 
            // fall through
          case 141: break;
          case 51: 
            { return FOR;
            } 
            // fall through
          case 142: break;
          case 52: 
            { return NEW;
            } 
            // fall through
          case 143: break;
          case 53: 
            { return OP_LSHIFT_ASSIGN;
            } 
            // fall through
          case 144: break;
          case 54: 
            { return OP_RSHIFT_ASSIGN;
            } 
            // fall through
          case 145: break;
          case 55: 
            { return OUT;
            } 
            // fall through
          case 146: break;
          case 56: 
            { return BOOLEAN_LITERAL;
            } 
            // fall through
          case 147: break;
          case 57: 
            { return THIS;
            } 
            // fall through
          case 148: break;
          case 58: 
            { return ELSE;
            } 
            // fall through
          case 149: break;
          case 59: 
            { return ENUM;
            } 
            // fall through
          case 150: break;
          case 60: 
            { return NULL_LITERAL;
            } 
            // fall through
          case 151: break;
          case 61: 
            { return GOTO;
            } 
            // fall through
          case 152: break;
          case 62: 
            { return DELIMITED_COMMENT;
            } 
            // fall through
          case 153: break;
          case 63: 
            { return EVENT;
            } 
            // fall through
          case 154: break;
          case 64: 
            { return LOCAL;
            } 
            // fall through
          case 155: break;
          case 65: 
            { return SUPER;
            } 
            // fall through
          case 156: break;
          case 66: 
            { return CLASS;
            } 
            // fall through
          case 157: break;
          case 67: 
            { return CONST;
            } 
            // fall through
          case 158: break;
          case 68: 
            { return WHILE;
            } 
            // fall through
          case 159: break;
          case 69: 
            { return INOUT;
            } 
            // fall through
          case 160: break;
          case 70: 
            { return PROTO;
            } 
            // fall through
          case 161: break;
          case 71: 
            { return OWNED;
            } 
            // fall through
          case 162: break;
          case 72: 
            { return BREAK;
            } 
            // fall through
          case 163: break;
          case 73: 
            { return THREAD;
            } 
            // fall through
          case 164: break;
          case 74: 
            { return RETURN;
            } 
            // fall through
          case 165: break;
          case 75: 
            { return STATIC;
            } 
            // fall through
          case 166: break;
          case 76: 
            { return SEALED;
            } 
            // fall through
          case 167: break;
          case 77: 
            { return SWITCH;
            } 
            // fall through
          case 168: break;
          case 78: 
            { return NATIVE;
            } 
            // fall through
          case 169: break;
          case 79: 
            { return DELETE;
            } 
            // fall through
          case 170: break;
          case 80: 
            { return MODDED;
            } 
            // fall through
          case 171: break;
          case 81: 
            { return EXTENDS;
            } 
            // fall through
          case 172: break;
          case 82: 
            { return FOREACH;
            } 
            // fall through
          case 173: break;
          case 83: 
            { return AUTOPTR;
            } 
            // fall through
          case 174: break;
          case 84: 
            { return NOTNULL;
            } 
            // fall through
          case 175: break;
          case 85: 
            { return PRIVATE;
            } 
            // fall through
          case 176: break;
          case 86: 
            { return EXTERNAL;
            } 
            // fall through
          case 177: break;
          case 87: 
            { return CONTINUE;
            } 
            // fall through
          case 178: break;
          case 88: 
            { return OVERRIDE;
            } 
            // fall through
          case 179: break;
          case 89: 
            { return VOLATILE;
            } 
            // fall through
          case 180: break;
          case 90: 
            { return REFERENCE;
            } 
            // fall through
          case 181: break;
          case 91: 
            { return PROTECTED;
            } 
            // fall through
          case 182: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
